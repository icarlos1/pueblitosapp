{"version":3,"sources":["components/Home.js","services/Auth.js","components/Signup.js","components/Login.js","components/Profile.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Link","to","url","AUTH_API","signup","body","Axios","post","concat","withCredentials","then","res","data","catch","err","login","profile","get","info","Signup","props","handleChange","e","key","target","name","value","type","placeholder","onChange","onClick","history","push","console","log","user","Login","handleInputs","window","localStorage","setItem","JSON","stringify","Profile","state","_this2","this","parse","getItem","setState","username","React","Component","Routes","Switch","Route","exact","path","component","App","className","src_Routes","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ede94d2c.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Home() {\n  return (\n    <div>\n      <Link to={'/signup'}>Signup</Link>\n      <Link to={'/login'}>Login</Link>\n      <Link to={'/profile'}>Profile</Link>\n    </div>\n  )\n}\n\nexport default Home\n","import Axios from 'axios'\n\nconst url = 'https://deploy-advanced-diuri.herokuapp.com/'\n\nconst AUTH_API = {\n  signup: body => {\n    return Axios.post(`${url}signup`, body, {\n      withCredentials: true\n    })\n      .then(res => res.data)\n      .catch(err => err)\n  },\n  login: body => {\n    return Axios.post(`${url}login`, body, {\n      withCredentials: true\n    })\n      .then(res => res.data)\n      .catch(err => err)\n  },\n  profile: () => {\n    return Axios.get(`${url}profile`, {\n      withCredentials: true\n    })\n      .then(res => res.data)\n      .catch(err => err)\n  }\n}\n\nexport default AUTH_API\n","import React from 'react'\nimport AUTH_API from '../services/Auth'\nconst info = {}\n\nfunction Signup(props) {\n  function handleChange(e) {\n    const key = e.target.name\n    info[key] = e.target.value\n  }\n\n  function signUp() {\n    AUTH_API.signup(info)\n      .then(res => {\n        props.history.push('/login')\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        name=\"username\"\n        placeholder=\"Username\"\n        onChange={handleChange}\n      />\n      <input\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"Email\"\n        onChange={handleChange}\n      />\n      <input\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"password\"\n        onChange={handleChange}\n      />\n      <button onClick={signUp}>Sign Up</button>\n    </div>\n  )\n}\n\nexport default Signup\n","import React from 'react'\n\nimport AUTH_API from '../services/Auth'\nconst user = {}\n\nfunction Login(props) {\n  function handleInputs(e) {\n    const key = e.target.name\n    user[key] = e.target.value\n  }\n\n  function logIn() {\n    AUTH_API.login(user)\n      .then(res => {\n        window.localStorage.setItem('user', JSON.stringify(res))\n        props.history.push('/profile')\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <div>\n      <input\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"email\"\n        onChange={handleInputs}\n      />\n      <input\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"password\"\n        onChange={handleInputs}\n      />\n      <button onClick={logIn}>Login</button>\n    </div>\n  )\n}\n\nexport default Login\n","import React from 'react'\nimport AUTH_API from '../services/Auth'\n\nclass Profile extends React.Component {\n  state = {\n    user: {}\n  }\n\n  componentWillMount() {\n    const user = JSON.parse(window.localStorage.getItem('user'))\n    if (!user) return this.props.history.push('/login')\n    AUTH_API.profile()\n      .then(res => {\n        this.setState({ user: res })\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  render() {\n    const { user } = this.state\n    if (!user) return <p>Loading ...</p>\n    return (\n      <div>\n        <h2>Welcome my lord {user.username}</h2>\n      </div>\n    )\n  }\n}\n\nexport default Profile\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Home from './components/Home'\nimport Signup from './components/Signup'\nimport Login from './components/Login'\nimport Profile from './components/Profile'\n\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/\" component={Home} />\n    <Route exact path=\"/signup\" component={Signup} />\n    <Route exact path=\"/login\" component={Login} />\n    <Route exact path=\"/profile\" component={Profile} />\n  </Switch>\n)\n\nexport default Routes\n","import React, { Component } from 'react'\nimport './App.css'\nimport Routes from './Routes'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Routes />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\n\nconst WithRouter = () => (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(<WithRouter />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}